import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

public class Comandos {
	
	public File cd(String[] comandoUsuario, File caminho )
	{
        if(comandoUsuario.length > 1) {
            String target = comandoUsuario[1];
            if(target.equals("..")) {
            	caminho = caminho.getParentFile();
            } else {
                File newDir = new File(caminho, target);
                
                if(newDir.exists() && newDir.isDirectory()) {
                	
                	caminho = newDir;
                	
                	
                } else {
                    System.out.println("Diretorio nao encontrado: " + target);
                }
            }
        }
        
        return caminho;
	}
	
	
	public void pwd(File caminho)
	{
		System.out.println(caminho.getPath());
	}
	
	public  void clear() {
	    for(int i = 0; i < 50; i++)
	    {
	    	System.out.println();
	    }
	}
	
	public void ls(File caminho)
	{
        for(File arquivoCursor : caminho.listFiles()) {
        	
            System.out.println(arquivoCursor.getName());
        
        }
	}
	
	public void cat(String[] comandoUsuario, File caminho)
	{
        if(comandoUsuario.length > 1) {
            Path caminhoArquivo = Paths.get(caminho.getPath(), comandoUsuario[1]);
            if(Files.exists(caminhoArquivo) && !Files.isDirectory(caminhoArquivo))
            {
            	
                try {
					Files.lines(caminhoArquivo).forEach(System.out::println);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                
            } else {
            	
                System.out.println("Arquivo nao encontrado ou é um diretorio: " + comandoUsuario[1]);
            }
        }
        
        
        
	}
	
	public void cp(String[] comandoUsuario, File caminho)
	{
        if(comandoUsuario.length > 2) {
            Path sourcePath = Paths.get(caminho.getPath(), comandoUsuario[1]);
            Path destPath = Paths.get(caminho.getPath(), comandoUsuario[2]);
            if(Files.exists(sourcePath) && !Files.isDirectory(sourcePath)) {
                try {
					Files.copy(sourcePath, destPath, StandardCopyOption.REPLACE_EXISTING);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            } else {
                System.out.println("Arquivo nao encontrado ou é um diretorio: " + comandoUsuario[1]);
            }
        }
	}
	
	public void mv(String[] comandoUsuario, File caminho) 
	{
        if(comandoUsuario.length > 2) {
            Path sourcePath = Paths.get(caminho.getPath(), comandoUsuario[1]);
            Path destPath = Paths.get( comandoUsuario[2]);
            if(Files.exists(sourcePath) && !Files.isDirectory(sourcePath)) {
                try {
                	 if( !Files.isDirectory(destPath) )
                	 {
                		 Files.move(sourcePath, destPath, StandardCopyOption.REPLACE_EXISTING);
                	 }
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            } else {
                System.out.println("Arquivo nao encontrado ou é um diretorio: " + comandoUsuario[1]);
            }
        
        }
        
	
	}
	
	public void mkdir(String[] comandoUsuario, File caminho)
	{
        if(comandoUsuario.length > 1) {
            Path diretorio = Paths.get(caminho.getPath(), comandoUsuario[1]);
            if(!Files.exists(diretorio)) {
                try {
					Files.createDirectory(diretorio);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            } else {
                System.out.println("Directory already exists: " + comandoUsuario[1]);
            }
        }
		
	}
	
	public void rm(String[] comandoUsuario, File caminho)
	{
		
        if(comandoUsuario.length > 1) {
            Path caminhoArquivo = Paths.get(caminho.getPath(), comandoUsuario[1]);
            if(Files.exists(caminhoArquivo) && !Files.isDirectory(caminhoArquivo)) {
                try {
					Files.delete(caminhoArquivo);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            } else {
                System.out.println("Arquivo nao encontrado ou é um diretorio: " + comandoUsuario[1]);
            }
        }
		
	}
	
	public void head(String[] comandoUsuario, File caminho)
	{
        if(comandoUsuario.length > 1) {
            Path caminhoArquivo = Paths.get(caminho.getPath(), comandoUsuario[1]);
            if(Files.exists(caminhoArquivo) && !Files.isDirectory(caminhoArquivo)) {
                try {
					Files.lines(caminhoArquivo).limit(10).forEach(System.out::println);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            } else {
                System.out.println("Arquivo nao encontrado ou é um diretorio: " + comandoUsuario[1]);
            }
        }
		
	}
	
	
	
	
	
	

}
